<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.projectbob.mapper.BobMapper">
<!-- 주문 읽기 -->
	<resultMap id="ordersResultMap" type="com.projectbob.domain.Orders">
        <id property="oNo" column="o_no" />
        <result property="sId" column="s_id" />
        <result property="id" column="id" />
        <result property="totalPrice" column="total_price" />
        <result property="payment" column="payment" />
        <result property="OAddress" column="o_address" />
        <result property="request" column="request" />
        <result property="regDate" column="reg_date" />
        <result property="modiDate" column="modi_date" />
        <result property="status" column="status" />
        <result property="quantity" column="quantity" />
        <result property="menus" column="menus" />
        <result property="paymentUid" column="payment_uid" />
        <result property="clientPhone" column="client_phone" /> 
  </resultMap>

  <select id="findOrdersByStatusAndShop" resultMap="ordersResultMap">
  SELECT 
      o.*, 
      c.phone AS client_phone
  FROM 
      orders o
  INNER JOIN
      client c ON o.id = c.id COLLATE utf8mb4_unicode_ci
  WHERE 
      o.status = #{status} AND o.s_id = #{sId} 
  ORDER BY 
      o.reg_date DESC
</select>

<!-- 메뉴 성분표  -->
<select id="getMenuCal" resultType="com.projectbob.domain.Menu">
        SELECT m_id, calories, carbs, protein, fat, sfa, sugar, sodium, serving_size
        FROM menu
        WHERE m_id = #{mId}
    </select>


<!-- 회원이 특정 가게에서 주문한 내역이 있는지 확인 -->
<select id="countOrdersByUserIdAndShopId" resultType="int">
	select COUNT(*) FROM orders 
	WHERE id = #{userId} AND s_id = #{sId} <!-- AND status = 'COMPLETED'  주문 완료처리하면 주석풀기-->
</select>

<!-- 주문 페이지에서 주문 완료 페이지로 보내기 -->
<insert id="insertOrder" parameterType="com.projectbob.domain.Orders" useGeneratedKeys="true" keyProperty="oNo">
	INSERT INTO orders (s_id, id, total_price, payment, payment_uid, o_address, request, status, quantity, menus, reg_date)
	VALUES (#{sId}, #{id}, #{totalPrice}, #{payment}, #{paymentUid}, #{oAddress}, #{request}, #{status}, #{quantity}, #{menus}, NOW())
</insert>

<!-- 주문 번호에 해당하는 주문 레코드를 DB에서 가져오기 -->
<select id="selectOrderId" parameterType="int" resultType="com.projectbob.domain.Orders">
	SELECT * FROM orders WHERE o_no = #{orderId}
</select>

<!-- payment_uid에 해당하는 주문 레코드를 DB에서 가져오기 -->
<select id="selectOrderByPaymentUid" parameterType="string" resultType="com.projectbob.domain.Orders">
	SELECT * FROM orders WHERE payment_uid = #{paymentUid}
</select>

<!-- 대댓글 개수 조회 -->
<select id="countReviewReply" parameterType="int" resultType="int">
	SELECT COUNT(*) FROM review_reply WHERE r_no = #{rNo}
</select>

<!-- 대댓글 삭제 -->
<delete id="deleteReviewReply" parameterType="int">
	DELETE FROM review_reply WHERE rr_no = #{rrNo}
</delete>

<!-- 대댓글 수정 -->
<update id="updateReviewReply" parameterType="ReviewReply">
	UPDATE review_reply SET content = #{content}, modi_date = SYSDATE()
	WHERE rr_no = #{rrNo}
</update>

<!-- 대댓글 추가 -->
<insert id="addReviewReply" parameterType="ReviewReply">
	INSERT INTO review_reply(r_no, s_id, id, content, status)
	VALUES(#{rNo}, #{sId}, #{id}, #{content}, #{status})
</insert>


	<!-- 주소내용 가져오기  -->
    <select id="findAddressesById" resultType="com.projectbob.domain.Addressbook"> SELECT
            no,
            id,
            a_name AS aName,    
            address1,
            address2
        FROM
            addressbook
        WHERE
            id = #{userId}
    </select>
	

    <!-- 장바구니 항목 수량 업데이트 -->
 <update id="updateCartItemQuantity" parameterType="map">
    UPDATE cart
    SET
        quantity = #{quantity},
        total_price = #{totalPrice}
    WHERE ca_id = #{caId}
    AND (
        (id = #{userId} AND #{userId} IS NOT NULL) OR
        (guest_id = #{guestId} AND #{guestId} IS NOT NULL)
    )
</update>

  <!-- 사용자 또는 비회원의 모든 장바구니 항목 삭제 -->
    <delete id="deleteAllCartItemsByUserOrGuest" parameterType="map">
        DELETE FROM cart
        <where>
            <if test="userId != null and userId.trim() != ''">
                id = #{userId}
            </if>
            <if test="guestId != null and guestId.trim() != ''">
                <if test="userId != null and userId.trim() != ''">
                    OR
                </if>
                guest_id = #{guestId}
            </if>
        </where>
    </delete>


<!-- 장바구니 개별 항목 삭제 (메인 메뉴 항목과 그에 연결된 모든 옵션 삭제) -->

<delete id="deleteCartItemAndOptions" parameterType="map">
  DELETE FROM cart
  WHERE (ca_id = #{caId} OR ca_pid = #{caId})
    AND (
      <choose>
        <when test="userId != null and userId.trim() != '' and guestId != null and guestId.trim() != ''">
          (id = #{userId} OR guest_id = #{guestId})
        </when>
        <when test="userId != null and userId.trim() != ''">
          id = #{userId}
        </when>
        <when test="guestId != null and guestId.trim() != ''">
          guest_id = #{guestId}
        </when>
        <otherwise>
          1 = 0  
        </otherwise>
      </choose>
    )
</delete>


 <resultMap id="CartDetailResultMap" type="com.projectbob.domain.Cart">
        <id property="caId" column="ca_id"/>
        <result property="caPid" column="ca_pid"/>
        <result property="mId" column="m_id"/>
        <result property="moId" column="mo_id"/>
        <result property="id" column="id"/>
        <result property="guestId" column="guest_id"/>
        <result property="sId" column="s_id"/>
        <result property="quantity" column="quantity"/>
        <result property="regDate" column="reg_date"/>
        <result property="modiDate" column="modi_date"/>
        <result property="status" column="status"/>
        <result property="totalPrice" column="total_price"/>
        <!-- 조인하여 가져오는 필드들 -->
        <result property="menuName" column="menuName"/>
        <result property="menuPrice" column="menuPrice"/>
        <result property="optionName" column="optionName"/>
        <result property="optionPrice" column="optionPrice"/>
    </resultMap>

<insert id="insertCart" parameterType="com.projectbob.domain.Cart" useGeneratedKeys="true" keyProperty="caId">
  INSERT INTO cart (m_id, mo_id, id, guest_id, s_id, quantity, total_price, reg_date, ca_pid)
  VALUES (#{mId}, #{moId}, #{id}, #{guestId}, #{sId}, #{quantity}, #{totalPrice}, NOW(), #{caPid})
</insert>

<!-- 사용자 또는 비회원 ID로 모든 장바구니 항목 조회 (메인 메뉴 및 옵션 포함) -->
<!-- ca_pid 컬럼도 함께 조회합니다. -->
<select id="selectCartByUserOrGuest" resultType="com.projectbob.domain.Cart" parameterType="map">
  SELECT
    c.ca_id,
    c.ca_pid,
    c.m_id,
    c.mo_id,
    c.id,
    c.guest_id,
    c.s_id,
    c.quantity,
    c.status,
    c.total_price,        m.name AS menuName,
    m.price AS menuPrice, mo.content AS optionName,
    mo.price AS optionPrice,
     mo.m_option AS optionGroupName,
    CASE
        WHEN c.mo_id IS NULL THEN m.price 
        ELSE mo.price                     
    END AS unitPrice FROM cart c
  INNER JOIN menu m ON c.m_id = m.m_id
  LEFT JOIN menu_option mo ON c.mo_id = mo.mo_id
  
 WHERE
  <choose>
    <when test="userId != null and userId.trim() != '' and guestId != null and guestId.trim() != ''">
      (c.id = #{userId} OR c.guest_id = #{guestId})
    </when>
    <when test="userId != null and userId.trim() != ''">
      c.id = #{userId}
    </when>
    <when test="guestId != null and guestId.trim() != ''">
      c.guest_id = #{guestId}
    </when>
    <otherwise>
      1 = 0
    </otherwise>
  </choose>
  ORDER BY c.ca_id ASC
</select>

<!-- 사용자 또는 비회원 ID로 메인 메뉴 장바구니 항목만 조회 (ca_pid가 NULL인 항목) -->
<!-- 이 쿼리는 메인 메뉴 항목만 필터링하여 가져올 때 사용됩니다. -->
<select id="selectMainCartItemsByUserOrGuest" resultMap="CartDetailResultMap" parameterType="map">
  SELECT
    c.ca_id,
    c.ca_pid,
    c.m_id,
    c.mo_id,
    c.id,
    c.guest_id,
    c.s_id,
    c.quantity,
    c.status,
    c.total_price,
    m.name AS menuName,
    m.price AS menuPrice,
    mo.content AS optionName,
    mo.price AS optionPrice
  FROM cart c
  INNER JOIN menu m ON c.m_id = m.m_id
  LEFT JOIN menu_option mo ON c.mo_id = mo.mo_id
  <where>
    c.ca_pid IS NULL 
    AND (
      <if test="userId != null and userId.trim() != ''">
        c.id = #{userId}
      </if>
      <if test="guestId != null and guestId.trim() != ''">
        <if test="userId != null and userId.trim() != ''">
          OR
        </if>
        c.guest_id = #{guestId}
      </if>
    )
  </where>
</select>



<!-- 대댓글 -->
<select id="reviewreplyList" parameterType="int" resultType="ReviewReply">
	SELECT * FROM review_reply WHERE r_no = #{rNo}
</select>

<!-- 댓글 대댓글 연결 -->
<resultMap id="reviewReplyResultMap" type="com.projectbob.domain.ReviewReply">
    <id property="rrNo" column="rr_no"/>
    <result property="rNo" column="r_no"/>
    <result property="sId" column="s_id"/>
    <result property="id" column="id"/>
    <result property="content" column="content"/>
    <result property="regDate" column="reg_date"/>
    <result property="modiDate" column="modi_date"/>
    <result property="status" column="status"/>
</resultMap>

<!-- 가게 전체 대댓글 가져오기 -->
<select id="getReviewReplyList" resultMap="reviewReplyResultMap">
	SELECT * FROM review_reply WHERE s_id = #{sId}
</select>

<!-- 댓글 삭제 -->
<delete id="deleteReview">
	DELETE FROM review WHERE r_no = #{rNo}
</delete>

<!-- 댓글 수정 -->
<update id="updateReview" parameterType="Review">
	UPDATE review SET content = #{content}, rating = #{rating}, r_picture = #{rPicture},
														m_id = #{mId},  modi_date = SYSDATE()
	WHERE r_no = #{rNo}
</update>

<!-- 댓글 추가 맵핑 구문 -->
<insert id="addReview" parameterType="Review">
	INSERT INTO review(id, s_id, m_id, content, rating, r_picture, liked, status, reg_date, modi_date, o_no)
	VALUES(#{id}, #{sId}, #{mId}, #{content}, #{rating}, #{rPicture}, #{liked}, #{status}, SYSDATE(), SYSDATE(), #{oNo})
</insert>

<!-- 내가 찜한 가게 목록 -->
<select id="getLikeShopList" parameterType="string" resultType="int">
	SELECT s_id FROM likelist WHERE id = #{id}
</select>

<!-- 찜 추가 시 shop.heart + 1 -->
<update id="incrementHeart" parameterType="int">
	UPDATE shop SET heart = heart + 1 WHERE s_id = #{sId}
</update>
<update id="decrementHeart" parameterType="int">
	UPDATE shop SET heart = GREATEST(heart -1, 0) WHERE s_id = #{sId}
</update>

<!-- 찜목록 버튼 -->
<select id="isLiked" parameterType="LikeList" resultType="int">
	SELECT COUNT(*) FROM likelist
	WHERE id = #{id} AND s_id = #{sId}
</select>
<insert id="addLikeList" parameterType="LikeList">
	INSERT INTO likelist(id, s_id, status, reg_date)
	VALUES(#{id}, #{sId}, 'Y', NOW())
</insert>
<delete id="deleteLikeList" parameterType="LikeList">
	DELETE FROM likelist WHERE id = #{id} AND s_id = #{sId}
</delete>
<select id="shopCountLike" parameterType="int" resultType="int">
	SELECT COUNT(*) FROM likelist WHERE s_id = #{sId}	
</select>

<!-- 하트 버튼 증가시키는 쿼리 -->
<!-- <update id="plusHeart" parameterType="int">
	UPDATE shop SET heart = heart + 1 WHERE s_id = #{sId}
</update> -->
<select id="getHeartCount" parameterType="int" resultType="int">
	SELECT heart FROM shop WHERE s_id = #{sId}
</select>

<!-- 댓글 대댓글 연결 -->
<resultMap id="reviewResultMap" type="com.projectbob.domain.Review">
    <id property="rNo" column="r_no"/>
    <result property="id" column="id"/>
    <result property="sId" column="s_id"/> 
    <result property="mId" column="m_id"/>
    <result property="content" column="content"/>
    <result property="rating" column="rating"/>
    <result property="rPicture" column="r_picture"/>
    <result property="liked" column="liked"/>
    <result property="regDate" column="reg_date"/>
    <result property="modiDate" column="modi_date"/>
    <result property="status" column="status"/>
    <result property="menuName" column="menuName"/>
    <result property="oNo" column="o_no"/>
    <result property="menus" column="menus"/>
</resultMap>

<!-- 리뷰 -->
<select id="getReviewList" parameterType="int" resultMap="reviewResultMap">
	SELECT r.r_no, r.id, r.s_id, r.m_id, r.content, r.rating,
		r.r_picture, r.liked, r.reg_date, r.modi_date, r.status, 
		m.name AS menuName, o.o_no, o.menus
	FROM review r
	JOIN menu m ON r.m_id = m.m_id
	LEFT JOIN orders o ON r.o_no = o.o_no
	WHERE r.s_id = #{sId} ORDER BY r.r_no DESC
</select>

<!-- 회원이 특정 가게에서 리뷰 가능한 주문 목록 조회 -->
<select id="getReviewableOrders" resultType="com.projectbob.domain.Orders">
	SELECT o.o_no, o.s_id, o.id, o.total_price, o.payment, o.payment_uid, o.o_address,
		o.request, o.status, o.quantity, o.menus, o.reg_date
	FROM orders o
	WHERE o.id = #{userId}
		AND o.s_id = #{sId}
		<!-- AND o.status = 'COMPLETED'   __완료된 주문만 -->
		AND NOT EXISTS (SELECT 1 FROM review r WHERE r.o_no = o.o_no)
			ORDER BY o.reg_date DESC
</select>

<!-- 특정 주문 번호에 대한 리뷰 개수 조회 -->
<select id="countReviewByOrderNo" resultType="int">
	SELECT COUNT(*) FROM review WHERE o_no = #{oNo}
</select>

<!-- 특정 주문 번호와 사용자 ID에 대한 리뷰 개수 조회 -->
<select id="countReviewByOrderNoAndUserId" resultType="int">
	SELECT COUNT(*) FROM review WHERE o_no = #{oNo} AND id = #{userId}
</select>

<!-- 주문 번호로 주문 정보 조회 -->
<select id="selectOrderByOrderNo" resultType="com.projectbob.domain.Orders">
	SELECT * FROM orders WHERE o_no = #{orderId}
</select>

<!-- 메뉴 이름으로 mId 조회 -->
<select id="selectMenuIdByName" resultType="int">
	SELECT m_id FROM menu WHERE name = #{menuName} LIMIT 1
</select>


<!-- 가게 상세 페이지에 필요한 xml -->
<select id="getMenuListByShopId" resultType="com.projectbob.domain.Menu">
	SELECT
	*
	FROM menu
	WHERE s_id = #{sId} ORDER BY m_id ASC
</select>

<!-- 모달창 메뉴옵션에 필요한 xml -->
<select id="getMenuOptionsByMenuId" resultType="com.projectbob.domain.MenuOption">
	SELECT
	*
	FROM menu_option
	WHERE m_id = #{mId}
	 ORDER BY price
</select>
<select id="getMenuCategoriesByShopId" resultType="java.lang.String">
	SELECT DISTINCT category FROM menu
	WHERE s_id = #{s_id} ORDER BY category
</select>
<!-- getMenuCategoriesByShopId는 주문표에 필요한 xml -->

<!-- 가게 리스트에서 가게 버튼 누를때 -->
<select id="getShopDetail" resultType="com.projectbob.domain.Shop">
	SELECT
	*
	FROM shop
	WHERE s_id = #{s_id}
</select>

<!-- 메인에서 가게 리스트로  -->
<select id="shopList" resultType="com.projectbob.domain.Shop" parameterType="map">
	SELECT
		s.s_id AS sId, s.id AS id, s.name AS name, s.phone AS phone, s.zipcode AS zipcode, 
		s.address1 AS address1, s.address2 AS address2, s.owner AS owner, 
		s.s_number AS sNumber, s.category AS category, s.s_pictureURL AS sPicture,
		COALESCE(ROUND(( SELECT AVG(r.rating) FROM review r WHERE r.s_id = s.s_id
		), 1), 0.0) AS rating,
		s.heart AS heart, s.min_price AS minPrice, s.reg_date AS regDate, s.modi_date AS modiDate
			FROM shop s
		where 1=1
		<if test="category != null and category != '전체보기'">
			AND s.category = #{category}
		</if>
		<if test="keyword != null and keyword != ''">
			AND s.name LIKE CONCAT('%', #{keyword} ,'%')
		</if>	
	ORDER BY s.s_id DESC
</select>

<!-- 주문번호로 주문 정보 조회 -->
    <select id="selectOrderByONo" parameterType="long" resultMap="ordersResultMap">
  SELECT 
      o.*, 
      c.phone AS client_phone
  FROM 
      orders o
  LEFT JOIN 
      client c ON o.id = c.id
  WHERE 
      o.o_no = #{oNo}
</select>

<!-- 주문 상태 업데이트 -->
    <update id="updateOrderStatus">
        UPDATE orders
        SET status = #{newStatus}, modi_date = NOW()
        WHERE o_no = #{oNo}
    </update>

</mapper>